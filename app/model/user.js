var mongoose = require('mongoose'),
    bcrypt = require('bcrypt-nodejs'),
    logger = require('../util/logger'),
    config = require('../../config/config');

UserSchema = mongoose.Schema({
    first_name: {
        type: String,
        trim: true,
    },

    last_name: {
        type: String,
        trim: true,
    },

    email: {
        type: String,
        trim: true,
        required: true
    },

    //password hash generated by bcrypt
    hash: String,

    //auth using soton ldap
    soton_ldap: {
        user_id: String,
        email: String,
        name: String
    },

    //password reset
    reset: {
        token: String,
        time_stamp: Date
    },

    //rememberme token
    rememberme: String,

    //quota
    quota: {
        cap: {
            type: Number,
            default: config.quota_limit
        },
        used: {
            type: Number,
            default: 0
        }
    },

    //CSDL history
    csdl: [{
        name: String,
        code: String
    }]
});

//static methods for user management
UserSchema.statics.signup = function(firstname, lastname, email, password, done) {
    bcrypt.hash(password, null, null, function(err, hash) {
        if (err) return done(err);

        User.create({
                first_name: firstname,
                last_name: lastname,
                email: email,
                hash: hash
            },

            function(err, user) {
                if (err) return done(err);

                done(null, user);
            });
    });
};


UserSchema.statics.isValidUserPassword = function(email, password, done) {
    User.findOne({
        email: email
    }, function(err, user) {
        if (err) return done(err);

        if (!user) return done(null, false, {
            message: 'Incorrect email.'
        });

        if (!user.hash) return done(null, false, {
            message: 'Password not set. Please reset your password first.'
        });

        bcrypt.compare(password, user.hash, function(err, result) {
            if (err) return done(err);

            if (result) return done(null, user);

            done(null, false, {
                message: 'Incorrect password'
            });
        });
    });
};

UserSchema.statics.findOrCreateSotonUser = function(profile, done) {
    User.findOne({
        'soton_ldap.id': profile.cn
    }, function(err, user) {
        if (err || user) return done(err, user);

        //not an existing user
        User.create({
            first_name: profile.givenName,
            last_name: profile.sn,
            email: profile.mail,
            soton_ldap: {
                id: profile.cn,
                email: profile.mail,
                name: profile.displayName
            }
        }, function(err, user) {
            if (err) return done(err);
            done(null, user);
        });
    });
};

//instance methods
UserSchema.methods.updateProfile = function(newpass, fn, ln, done) {
    if (newpass) {
        bcrypt.hash(newpass, null, null, function(err, hash) {
            if (fn)
                this.firstName = fn;
            if (ln)
                this.lastName = ln;
            this.hash = hash;
            this.save(done);
        });
    }
    if (fn)
        this.first_name = fn;
    if (ln)
        this.last_name = ln;
    this.save(done);
};

var User = mongoose.model("User", UserSchema);
module.exports = User;
