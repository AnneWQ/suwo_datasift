var mongoose = require('mongoose'),
    bcrypt = require('bcrypt-nodejs'),
    logger = require('../util/logger'),
    config = require('../../config/config');

AdminSchema = mongoose.Schema({
    first_name: String,
    last_name: String,
    username: String,
    //password hash generated by bcrypt
    hash: String,
    //auth using soton ldap
    soton_ldap: {
        user_id: String,
        email: String,
        name: String
    },

    //rememberme token
    rememberme: String,
    //datasift
    ds_user: String,
    ds_api_key: String
});

AdminSchema.statics.isValidUserPassword = function(email, password, done) {
    this.findOne({
        email: email
    }, function(err, user) {
        if (err) return done(err);

        if (!user) return done(null, false, {
            message: 'Incorrect email.'
        });

        if (!user.hash) return done(null, false, {
            message: 'Password not set. Please reset your password first.'
        });

        bcrypt.compare(password, user.hash, function(err, result) {
            if (err) return done(err);

            if (result) return done(null, user);

            done(null, false, {
                message: 'Incorrect password'
            });
        });
    });
};

//instance methods
AdminSchema.methods.updateProfile = function(newpass, fn, ln, done) {
    if (newpass) {
        bcrypt.hash(newpass, null, null, function(err, hash) {
            if (fn)
                this.firstName = fn;
            if (ln)
                this.lastName = ln;
            this.hash = hash;
            this.save(done);
        });
    }
    if (fn)
        this.first_name = fn;
    if (ln)
        this.last_name = ln;
    this.save(done);
};

module.exports = mongoose.model("Admin", AdminSchema);
